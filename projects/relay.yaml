substitutions:
  name: relay
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  pin_i2c_sda: GPIO03
  pin_i2c_scl: GPIO02
  pin_status_led: GPIO01
  pin_relay: GPIO00

globals:
  - id: page
    type: int
    restore_value: no
    initial_value: "0"
  - id: backlight
    type: int
    restore_value: yes
    initial_value: "1"
  - id: ota_progress
    type: float
    restore_value: false
    initial_value: "0"

packages:
  base: 
    url: https://github.com/catalin2402/esphome-base
    files: [base.yaml, status/led.yaml]
    refresh: 10 min

esphome:
  on_boot:
    priority: -100
    then:
      - script.execute: check_sun
      - lambda: |-
          id(mydisplay).no_backlight();
      - globals.set:
          id: backlight
          value: "0"

esp8266:
  board: esp12e

logger:
  baud_rate: 0
  logs:
    text_sensor: ERROR
  
api:
  reboot_timeout: 0s

ota:
  on_begin:
    then:
      - lambda: |-
          id(mydisplay).backlight();
      - component.update: mydisplay
  on_progress:
    then:
      - globals.set: 
          id: ota_progress
          value: !lambda return x;
      - component.update: mydisplay
  on_end: 
    then:
      - globals.set: 
          id: ota_progress
          value: !lambda return 100;   
      - component.update: mydisplay  

i2c:
  sda: $pin_i2c_sda
  scl: $pin_i2c_scl

time:
  - platform: sntp
    id: external
    timezone: "Europe/Bucharest"
    on_time_sync:
      then:
        - script.execute: check_sun
        - ds1307.write_time:
    on_time:
      - minutes: /1
        then:
          - lambda: |-
              auto time = id(external).now().strftime("%Y-%m-%d %H:%M:%S");
              return id(external_time).publish_state(time);  

  - platform: ds1307
    id: ds1307_time
    timezone: "Europe/Bucharest"
    on_time:
      - minutes: /1
        then:
          - lambda: |-
              auto time = id(ds1307_time).now().strftime("%Y-%m-%d %H:%M:%S");
              return id(internal_time).publish_state(time);

text_sensor:
  - platform: template
    name: "Internal time"
    id: internal_time

  - platform: template
    name: "External time"
    id: external_time   

  - platform: sun
    name: Sunrise
    id: sunrise
    type: sunrise

  - platform: sun
    name: Sunset
    id: sunset
    type: sunset

sensor:
  - platform: bmp280
    temperature:
      id: temp
      name: "Temperature"
      oversampling: 16x
      filters:
        - offset: -3
    pressure:
      id: pres
      name: "Pressure"
    address: 0x76
    update_interval: 60s

switch:
  - platform: gpio
    id: relay
    pin:
      number: $pin_relay
      inverted: true
    name: "Relay"

  - platform: template
    name: "Backlight"
    lambda: |-
      return id(backlight);
    turn_on_action: 
      - lambda: |-
          id(mydisplay).backlight();
      - globals.set:
          id: backlight
          value: "1"
    turn_off_action: 
      - lambda: |-
          id(mydisplay).no_backlight();
      - globals.set:
          id: backlight
          value: "0"

sun:
  latitude: 44.4550782°
  longitude: 24.4539806°
  on_sunrise:
    - then:
        - delay: 15min
        - switch.turn_off: relay
  on_sunset:
    - then:
        - delay: 15min
        - switch.turn_on: relay

display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    id: mydisplay
    address: 0x27
    lambda: |-
      if (id(ota_progress) != 0){
         it.print(0, 0, "UPDATING");
         it.printf(0, 1, "PROGRESS: %.1f%%", id(ota_progress));
      } else {
        if ((id(page) == 0 || id(page) == 1) && id(relay).state == 1 ){
          it.print(0, 0, "\52");
        }

        if (id(page) == 0){
          it.print(0, 1, "LOCAL");
          it.strftime(6, 0, "%Y-%m-%d", id(ds1307_time).now());
          it.strftime(8, 1, "%H:%M:%S", id(ds1307_time).now());
        } 

        if (id(page) == 1){
          it.print(0, 1, "ONLINE");
          it.strftime(6, 0, "%Y-%m-%d", id(external).now());
          it.strftime(8, 1, "%H:%M:%S", id(external).now());
        } 

        if (id(page) == 2){
          it.printf(0, 0, "SUNRISE %s", id(sunrise).state.c_str());
          it.printf(0, 1, "SUNSET  %s", id(sunset).state.c_str());
        }

        if (id(page) == 3) {
          it.printf(0, 0, "TEMP %.1f\337C", id(temp).state);
          it.printf(0, 1, "PRES %.1f hPa", id(pres).state);
        } 
      }

script:
  - id: check_sun
    mode: restart
    then:
      - if:
          condition:
            - sun.is_above_horizon:
          then:
            - switch.turn_off: relay
          else:
            - switch.turn_on: relay

interval:
  - interval: 5 sec
    then:
      - if:
          condition:
            lambda: |-
              return id(page) == 0;
          then:
            - globals.set:
                id: page
                value: "1"
          else:
            - if:
                condition:
                  lambda: |-
                    return id(page) == 1;
                then:
                  - globals.set:
                      id: page
                      value: "2"
                else:
                  - if:
                      condition:
                        lambda: |-
                          return id(page) == 2;
                      then:
                        - globals.set:
                            id: page
                            value: "3"
                      else:
                        - globals.set:
                            id: page
                            value: "0"