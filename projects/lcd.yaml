substitutions:
  name: lcd
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  pin_spi_clk: GPIO18
  pin_spi_mosi: GPIO23
  pin_spi_miso: GPIO19
  pin_display_backlight: GPIO14
  pin_display_reset: GPIO13
  pin_display_cs: GPIO05
  pin_display_dc: GPIO26
  pin_touch_cs: GPIO27
  pin_touch_interrupt: GPIO33
  pin_motion_sensor: GPIO25

globals:
  - id: ota_progress
    type: float
    restore_value: false
    initial_value: "0"
  
  - id: selected_device
    type: int
    restore_value: false
    initial_value: "0"

packages:
  base: 
    url: https://github.com/catalin2402/esphome-base
    files: [base.yaml, time/ha.yaml]
    refresh: 10 min
esphome:
  on_boot:
    - priority: -100
      then:
        - script.execute: lcd_backlight_touch

    - priority: 250
      then:
        - script.execute: connecting_script

esp32:
  board: wemos_d1_mini32

ota:
  on_begin:
    then:
      - script.stop: lcd_backlight_touch
      - script.stop: lcd_backlight_sensor
      - output.set_level:
          id: gpio_32_backlight_pwm
          level: 1
      - display.page.show: ota_upload
      - component.update: lcd
  on_progress:
    then:
      - script.stop: lcd_backlight_touch
      - script.stop: lcd_backlight_sensor
      - output.set_level:
          id: gpio_32_backlight_pwm
          level: 1
      - globals.set: 
          id: ota_progress
          value: !lambda |-
            return x;
      - component.update: lcd
  on_error:
    then:
      - script.stop: lcd_backlight_touch
      - script.stop: lcd_backlight_sensor
      - output.set_level:
          id: gpio_32_backlight_pwm
          level: 1
      - display.page.show: ota_upload_error
      - component.update: lcd
      - delay: 5s
      - display.page.show: home
      - component.update: lcd
  on_end:
    then:
      - script.stop: lcd_backlight_touch
      - script.stop: lcd_backlight_sensor
      - output.set_level:
          id: gpio_32_backlight_pwm
          level: 1
      - display.page.show: ota_upload_success
      - component.update: lcd
      - delay: 10s

font:
  - file: "fonts/arial.ttf"
    id: arial_16
    size: 16

  - file: "fonts/arial.ttf"
    id: arial_24
    size: 24

  - file: "fonts/dseg7-bold.ttf"
    id: arial_bold_48
    size: 40  
    glyphs: ":0123456789APM"

  - file: "fonts/material-icons.ttf"
    id: icons_font
    size: 48
    glyphs:
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F0A39" # mdi-cloud-question


  - file: "fonts/material-icons.ttf"
    id: icons_font_40
    size: 40
    glyphs:
      - "\U000F06A1" # mdi-home-outline
      - "\U000F1254" # mdi-lightbulb-group-outline
      - "\U000F1352" # mdi-hvac
      - "\U000F0099" # mdi-bed-outline
      - "\U000F0336" # mdi-lightbulb-outline
      - "\U000F005D" # mdi-arrow-up
      - "\U000F0045" # mdi-arrow-down
      - "\U000F06E9" # mdi-lightbulb-on-outline
      - "\U000F0E50" # mdi-lightbulb-off-outline
      - "\U000F07D6" # mdi-led-strip
      - "\U000F001B" # mdi-air-conditioner
      - "\U000F0438" # mdi-radiator
      - "\U000F0AD8" # mdi-radiator-off
      - "\U000F0AD7" # mdi-radiator-disabled
      - "\U000F0415" # mdi-plus
      - "\U000F0374" # mdi-minus

  - file: "fonts/material-icons.ttf"
    id: wifi_font
    size: 16
    glyphs:
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F092B" # mdi-wifi-strength-alert-outline

  - file: "fonts/material-icons.ttf"
    id: wifi_font_big
    size: 100
    glyphs:
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F0B7D" # mdi-cloud-download-outline

color:
  - id: white
    red: 100%
    green: 100%
    blue: 100%

  - id: red
    red: 100%
    green: 0%
    blue: 0%

  - id: blue
    red: 0%
    green: 0%
    blue: 100%

  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

  - id: green
    red: 0%
    green: 100%
    blue: 0%

spi:
  clk_pin: $pin_spi_clk
  mosi_pin: $pin_spi_mosi
  miso_pin: $pin_spi_miso

output:
  - platform: ledc
    pin: $pin_display_backlight
    id: gpio_32_backlight_pwm

light:
  - platform: monochromatic
    output: gpio_32_backlight_pwm
    name: "$name Backlight"
    id: backlight
    restore_mode: ALWAYS_ON

display:
  - platform: ili9341
    id: lcd
    model: TFT 2.4
    reset_pin: $pin_display_reset
    cs_pin: $pin_display_cs
    dc_pin: $pin_display_dc
    pages:
      - id: connecting
        lambda: |-
          it.printf(120, 160, id(wifi_font_big), TextAlign::CENTER, "\U000F0928"); // mdi-wifi-strength-4
          it.print(120, 220, id(arial_16), TextAlign::CENTER, id(ip_address).state.c_str());

      - id: connecting_blank
        lambda: |-
          auto black = Color(0, 0, 0);
          it.rectangle(0, 0, 240, 320, black);
          it.print(120, 220, id(arial_16), TextAlign::CENTER, id(ip_address).state.c_str());

      - id: ota_upload
        lambda: |-
          it.printf(120, 160, id(wifi_font_big), TextAlign::CENTER, "\U000F0B7D"); // mdi-cloud-download-outline
          it.printf(120, 220, id(arial_16), TextAlign::CENTER, "Update in progress: %.1f%%", id(ota_progress));

      - id: ota_upload_error
        lambda: |-
          it.printf(120, 160, id(wifi_font_big), id(red), TextAlign::CENTER, "\U000F0B7D"); // mdi-cloud-download-outline
          it.print(120, 220, id(arial_16), id(red), TextAlign::CENTER, "Update failed");

      - id: ota_upload_success
        lambda: |-
          it.printf(120, 160, id(wifi_font_big), id(green), TextAlign::CENTER, "\U000F0B7D"); // mdi-cloud-download-outline
          it.print(120, 220, id(arial_16), id(green), TextAlign::CENTER, "Update completed. Restarting");
      
      - id: home
        lambda: |-
          auto wifi_icon = "\U000F092B";                // mdi-wifi-strength-alert-outline
          if (id(signal_wifi).state >= -50) {
            wifi_icon = "\U000F0928";                   // mdi-wifi-strength-4
          } else if (id(signal_wifi).state  >= -60) {
            wifi_icon = "\U000F0925";                   // mdi-wifi-strength-3
          } else if (id(signal_wifi).state  >= -67) {
            wifi_icon = "\U000F0922";                   // mdi-wifi-strength-2
          } else if (id(signal_wifi).state  >= -70) {
            wifi_icon = "\U000F091F";                   // mdi-wifi-strength-1
          } else {
            wifi_icon = "\U000F092B";                   // mdi-wifi-strength-alert-outline
          }
          it.print(220, 0, id(wifi_font), wifi_icon);
        
          it.strftime(120, 32, id(arial_bold_48), TextAlign::CENTER_HORIZONTAL, "%H:%M", id(time_ha).now());
        
          std::map<std::string, std::string> icon_map{
            {"cloudy", "\U000F0590"},                   // mdi-weather-cloudy
            {"fog", "\U000F0591"},                      // mdi-weather-fog
            {"hail", "\U000F0592"},                     // mdi-weather-hail
            {"lightning", "\U000F0593"},                // mdi-weather-lightning
            {"lightning-rainy", "\U000F067E"},          // mdi-weather-lightning-rainy
            {"clear-night", "\U000F0594"},              // mdi-weather-night
            {"partlycloudy", "\U000F0595"},             // mdi-weather-partly-cloudy
            {"pouring", "\U000F0596"},                  // mdi-weather-pouring
            {"rainy", "\U000F0597"},                    // mdi-weather-rainy
            {"snowy", "\U000F0598"},                    // mdi-weather-snowy
            {"snowy-rainy", "\U000F067F"},              // mdi-weather-snowy-rainy
            {"sunny", "\U000F0599"},                    // mdi-weather-sunny
            {"windy", "\U000F059D"},                    // mdi-weather-windy
            {"windy-variant", "\U000F059E"},            // mdi-weather-windy-variant
            {"exceptional", "\U000F0A39"}               // mdi-cloud-question
          };
        
          if (id(weather_icon).has_state())
            it.print(50, 80, id(icons_font), icon_map[id(weather_icon).state.c_str()].c_str());
        
          auto color = id(white);
          if (id(weather_temperature).has_state()){
            if (id(weather_temperature).state >= 35)
                color = id(red);
            else if (id(weather_temperature).state <= 10)
              color = id(blue);
            else
              color = id(white);
            it.printf(100, 88, id(arial_16), color, "%.1f °C", id(weather_temperature).state);
          }
        
          if (id(weahter_pressure).has_state())
            it.printf(100, 108, id(arial_16), "%.1f hPa", id(weahter_pressure).state);
        
          if (id(balcony_temperature).has_state()){
            if (id(balcony_temperature).state >= 27)
                color = id(red);
            else if (id(balcony_temperature).state <= 18)
              color = id(blue);
            else
              color = id(white);
            it.printf(120, 140, id(arial_16), color, TextAlign::CENTER_HORIZONTAL, "Balcony: %.1f °C", id(balcony_temperature).state);
          }
        
          if (id(livingroom_temperature).has_state()){
            if (id(livingroom_temperature).state >= 27)
                color = id(red);
            else if (id(livingroom_temperature).state <= 18)
              color = id(blue);
            else
              color = id(white);
            it.printf(120, 160, id(arial_16), color, TextAlign::CENTER_HORIZONTAL, "Livingroom: %.1f °C", id(livingroom_temperature).state);
          }
        
          if (id(hallway_1_temperature).has_state() && id(hallway_2_temperature).has_state()){
            if (id(hallway_2_temperature).state >= 27)
                color = id(red);
            else if (id(hallway_2_temperature).state <= 18)
              color = id(blue);
            else
              color = id(white);
            it.printf(120, 180, id(arial_16), color, TextAlign::CENTER_HORIZONTAL, "Hallway: %.1f °C  %.1f °C", id(hallway_1_temperature).state, id(hallway_2_temperature).state);
          }
        
          if (id(bedroom_temperature).has_state()){
            if (id(bedroom_temperature).state >= 27)
                color = id(red);
            else if (id(bedroom_temperature).state <= 18)
              color = id(blue);
            else
              color = id(white);            
            it.printf(120, 200, id(arial_16), color, TextAlign::CENTER_HORIZONTAL, "Bedroom: %.1f °C", id(bedroom_temperature).state);
          }
        
          if (id(bedroom_2_temperature).has_state()){
            if (id(bedroom_2_temperature).state >= 27)
                color = id(red);
            else if (id(bedroom_2_temperature).state <= 18)
              color = id(blue);
            else
              color = id(white);   
            it.printf(120, 220, id(arial_16), color, TextAlign::CENTER_HORIZONTAL, "Bedroom 2: %.1f °C", id(bedroom_2_temperature).state);
          }
        
          it.print(10, 275, id(icons_font_40),id(yellow), "\U000F06A1"); // mdi-home-outline
          it.print(70, 275, id(icons_font_40), "\U000F1254");            // mdi-lightbulb-group-outline
          it.print(130, 275, id(icons_font_40), "\U000F1352");           // mdi-hvac
          it.print(190, 275, id(icons_font_40), "\U000F0099");           // mdi-bed-outline

      - id: lights
        lambda: |-
          auto wifi_icon = "\U000F092B";                // mdi-wifi-strength-alert-outline
          if (id(signal_wifi).state >= -50) {
            wifi_icon = "\U000F0928";                   // mdi-wifi-strength-4
          } else if (id(signal_wifi).state  >= -60) {
            wifi_icon = "\U000F0925";                   // mdi-wifi-strength-3
          } else if (id(signal_wifi).state  >= -67) {
            wifi_icon = "\U000F0922";                   // mdi-wifi-strength-2
          } else if (id(signal_wifi).state  >= -70) {
            wifi_icon = "\U000F091F";                   // mdi-wifi-strength-1
          } else {
            wifi_icon = "\U000F092B";                   // mdi-wifi-strength-alert-outline
          }
          it.print(220, 0, id(wifi_font), wifi_icon);
        
          it.print(10, 20, id(arial_24), "Lights");
          auto text = "Bedroom 2";
          auto device_color_0 = id(white);
          auto device_color_1 = id(white);
          auto device_color_2 = id(white);
          auto device_color_3 = id(white);
          switch (id(selected_device)) {
            case 0:
              device_color_0 = id(yellow);
              text = "Bedroom 2";
              break;
            case 1:
              device_color_1 = id(yellow);
              text = "Hallway";
              break;
            case 2:
              device_color_2 = id(yellow);
              text = "Balcony";
              break;
            case 3:
              device_color_3 = id(yellow);
              text = "Livingroom";
              break;
          }
        
          it.print (10, 60, id(icons_font_40), device_color_0, "\U000F0336"); // mdi-lightbulb-outline
          it.print (70, 60, id(icons_font_40), device_color_1, "\U000F0336"); // mdi-lightbulb-outline
          it.print (130, 60, id(icons_font_40), device_color_2, "\U000F07D6"); // mdi-led-strip
          it.print (190, 60, id(icons_font_40), device_color_3, "\U000F07D6"); // mdi-led-strip
        
          it.printf(120, 110, id(arial_16), TextAlign::CENTER_HORIZONTAL, text);
        
          it.print(10, 130, id(arial_24), "Action");
        
          it.print (10, 170, id(icons_font_40), "\U000F0E50");  // mdi-lightbulb-off-outline
          it.print (70, 170, id(icons_font_40), "\U000F06E9");  // mdi-lightbulb-on-outline
          it.print (130, 170, id(icons_font_40), "\U000F005D"); // mdi-arrow-up
          it.print (190, 170, id(icons_font_40), "\U000F0045"); // mdi-arrow-down
        
          it.print(10, 275, id(icons_font_40), "\U000F06A1");             // mdi-home-outline
          it.print(70, 275, id(icons_font_40), id(yellow), "\U000F1254"); // mdi-lightbulb-group-outline
          it.print(130, 275, id(icons_font_40), "\U000F1352");            // mdi-hvac
          it.print(190, 275, id(icons_font_40), "\U000F0099");            // mdi-bed-outline
      
      - id: climate
        lambda: |-
          auto wifi_icon = "\U000F092B";                // mdi-wifi-strength-alert-outline
          if (id(signal_wifi).state >= -50) {
            wifi_icon = "\U000F0928";                   // mdi-wifi-strength-4
          } else if (id(signal_wifi).state  >= -60) {
            wifi_icon = "\U000F0925";                   // mdi-wifi-strength-3
          } else if (id(signal_wifi).state  >= -67) {
            wifi_icon = "\U000F0922";                   // mdi-wifi-strength-2
          } else if (id(signal_wifi).state  >= -70) {
            wifi_icon = "\U000F091F";                   // mdi-wifi-strength-1
          } else {
            wifi_icon = "\U000F092B";                   // mdi-wifi-strength-alert-outline
          }
          it.print(220, 0, id(wifi_font), wifi_icon);
        
          it.print(10, 20, id(arial_24), "Climate");
          auto text = "Bedroom 2";
          float temp = 0;
          auto device_color_0 = id(white);
          auto device_color_1 = id(white);
          auto device_color_2 = id(white);
          auto device_color_3 = id(white);
        
          switch (id(selected_device)) {
            case 0:
              device_color_0 = id(yellow);
              text = "A/C";
              temp = id(set_temp_ac).state;
              break;
            case 1:
              device_color_1 = id(yellow);
              text = "Bedroom";
              temp = id(set_temp_bedroom).state;
              break;
            case 2:
              device_color_2 = id(yellow);
              text = "Bedroom 2";
              temp = id(set_temp_bedroom2).state;
              break;
            case 3:
              device_color_3 = id(yellow);
              text = "Livingroom";
              temp = id(set_temp_livingroom).state;
              break;
          }
        
          it.print (10, 60, id(icons_font_40), device_color_0, "\U000F001B");  // mdi-air-conditioner
          it.print (70, 60, id(icons_font_40), device_color_1, "\U000F0AD7");  // mdi-radiator-disabled
          it.print (130, 60, id(icons_font_40), device_color_2, "\U000F0AD7"); // mdi-radiator-disabled
          it.print (190, 60, id(icons_font_40), device_color_3, "\U000F0AD7"); // mdi-radiator-disabled
        
          it.printf(120, 110, id(arial_16), TextAlign::CENTER_HORIZONTAL, text);
        
          it.print(10, 130, id(arial_24), "Action");
        
          it.print (10, 170, id(icons_font_40), "\U000F0AD8");  // mdi-radiator-off
          it.print (70, 170, id(icons_font_40), "\U000F0438");  // mdi-radiator
          it.print (130, 170, id(icons_font_40), "\U000F0374"); // mdi-minus
          it.print (190, 170, id(icons_font_40), "\U000F0415"); // mdi-plus
        
          it.printf(120, 225, id(arial_16), TextAlign::CENTER_HORIZONTAL, "Temperature: %.1f °C", temp);
        
          it.print(10, 275, id(icons_font_40), "\U000F06A1");             // mdi-home-outline
          it.print(70, 275, id(icons_font_40), "\U000F1254");             // mdi-lightbulb-group-outline
          it.print(130, 275, id(icons_font_40),id(yellow), "\U000F1352"); // mdi-hvac
          it.print(190, 275, id(icons_font_40), "\U000F0099");            // mdi-bed-outline
      
      - id: bedroom2
        lambda: |-
          auto wifi_icon = "\U000F092B";                // mdi-wifi-strength-alert-outline
          if (id(signal_wifi).state >= -50) {
            wifi_icon = "\U000F0928";                   // mdi-wifi-strength-4
          } else if (id(signal_wifi).state  >= -60) {
            wifi_icon = "\U000F0925";                   // mdi-wifi-strength-3
          } else if (id(signal_wifi).state  >= -67) {
            wifi_icon = "\U000F0922";                   // mdi-wifi-strength-2
          } else if (id(signal_wifi).state  >= -70) {
            wifi_icon = "\U000F091F";                   // mdi-wifi-strength-1
          } else {
            wifi_icon = "\U000F092B";                   // mdi-wifi-strength-alert-outline
          }
          it.print(220, 0, id(wifi_font), wifi_icon);
        
        
          it.print(10, 275, id(icons_font_40), "\U000F06A1");               // mdi-home-outline
          it.print(70, 275, id(icons_font_40), "\U000F1254");               // mdi-lightbulb-group-outline
          it.print(130, 275, id(icons_font_40), "\U000F1352");              // mdi-hvac
          it.print(190, 275, id(icons_font_40), id(yellow), "\U000F0099");  // mdi-bed-outline
      
touchscreen:
  - platform: xpt2046
    id: touchscr
    cs_pin: $pin_touch_cs
    interrupt_pin: $pin_touch_interrupt
    update_interval: 50ms
    report_interval: 1s
    threshold: 400
    calibration_x_min: 306
    calibration_x_max: 4040
    calibration_y_min: 195
    calibration_y_max: 3440
    on_touch:
      - script.execute: lcd_backlight_touch

sun:
  latitude: 44.426880°
  longitude: 26.126260°

binary_sensor:
  - platform: gpio
    pin: $pin_motion_sensor
    name: "$name Motion"
    device_class: motion
    on_press:
      - script.execute: lcd_backlight_sensor

  - platform: touchscreen
    id: btn_home
    x_min: 5
    x_max: 55
    y_min: 280
    y_max: 320
    on_press:
      - if:
          condition:
            - binary_sensor.is_on: status_sensor
          then:
            - globals.set:
                id: selected_device
                value: "0"
            - display.page.show: home
            - component.update: lcd

  - platform: touchscreen
    id: btn_lights
    x_min: 65
    x_max: 115
    y_min: 280
    y_max: 320
    on_press:
      - if:
          condition:
            - binary_sensor.is_on: status_sensor
          then:
            - display.page.show: lights
            - component.update: lcd

  - platform: touchscreen
    id: btn_hvac
    x_min: 125
    x_max: 175
    y_min: 280
    y_max: 320
    on_press:
      - if:
          condition:
            - binary_sensor.is_on: status_sensor
          then:
            - display.page.show: climate
            - component.update: lcd

  - platform: touchscreen
    id: btn_bedroom2
    x_min: 185
    x_max: 235
    y_min: 240
    y_max: 320
    on_press:
      - if:
          condition:
            - binary_sensor.is_on: status_sensor
          then:
            - display.page.show: bedroom2
            - component.update: lcd

  - platform: touchscreen
    id: btn_select_device_0
    x_min: 5
    x_max: 55
    y_min: 50
    y_max: 100
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - or:
                    - display.is_displaying_page: lights
                    - display.is_displaying_page: climate
          then:
            - globals.set:
                id: selected_device
                value: "0"
            - component.update: lcd

  - platform: touchscreen
    id: btn_select_device_1
    x_min: 65
    x_max: 115
    y_min: 50
    y_max: 100
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - or:
                    - display.is_displaying_page: lights
                    - display.is_displaying_page: climate
          then:
            - globals.set:
                id: selected_device
                value: "1"
            - component.update: lcd

  - platform: touchscreen
    id: btn_select_device_2
    x_min: 125
    x_max: 175
    y_min: 50
    y_max: 100
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - or:
                    - display.is_displaying_page: lights
                    - display.is_displaying_page: climate
          then:
            - globals.set:
                id: selected_device
                value: "2"
            - component.update: lcd

  - platform: touchscreen
    id: btn_select_device_3
    x_min: 185
    x_max: 235
    y_min: 50
    y_max: 100
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - or:
                    - display.is_displaying_page: lights
                    - display.is_displaying_page: climate
          then:
            - globals.set:
                id: selected_device
                value: "3"
            - component.update: lcd

  - platform: touchscreen
    id: btn_power_off_device
    x_min: 5
    x_max: 55
    y_min: 170
    y_max: 230
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: lights
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "turn_off_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: climate
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "climate_off_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";

  - platform: touchscreen
    id: btn_power_on_device
    x_min: 65
    x_max: 115
    y_min: 170
    y_max: 230
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: lights
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "turn_on_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: climate
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "climate_on_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";

  - platform: touchscreen
    id: btn_brightness_up_device
    x_min: 125
    x_max: 175
    y_min: 170
    y_max: 230
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: lights
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "brightness_up_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: climate
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "climate_down_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";

  - platform: touchscreen
    id: btn_brightness_down_device
    x_min: 185
    x_max: 235
    y_min: 170
    y_max: 230
    on_press:
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: lights
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "brightness_down_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";
      - if:
          condition:
            - and:
                - binary_sensor.is_on: status_sensor
                - display.is_displaying_page: climate
          then:
            - text_sensor.template.publish:
                id: action
                state: !lambda return "climate_up_" + to_string(id(selected_device));
            - delay: 100 ms
            - text_sensor.template.publish:
                id: action
                state: !lambda return "";

  - platform: status
    id: status_sensor
    on_press:
      then:
        - script.stop: connecting_script
        - display.page.show: home
        - component.update: lcd
    on_release:
      - script.execute: connecting_script
  
text_sensor:

  - platform: template
    id: action
    name: "$name Action"
    icon: mdi:gesture-tap

  - platform: homeassistant
    entity_id: weather.openweathermap
    id: weather_icon
    internal: true

number:
  - platform: template
    id: night_brightness
    name: "$name Night Brightness"
    icon: mdi:brightness-4
    min_value: 0
    max_value: 100
    step: 1
    optimistic: True
    initial_value: 50

  - platform: template
    id: day_brightness
    name: "$name Day Brightness"
    icon: mdi:brightness-7
    min_value: 0
    max_value: 100
    step: 1
    optimistic: True
    initial_value: 100

  - platform: template
    id: dimmed_brightness
    name: "$name Dimmed Brightness"
    icon: mdi:brightness-5
    min_value: 0
    max_value: 100
    step: 1
    optimistic: True
    initial_value: 25

  - platform: template
    id: backlight_timeout
    name: "$name Backlight Timeout"
    icon: mdi:timer
    min_value: 0
    max_value: 120
    step: 1
    optimistic: True
    initial_value: 30

sensor:
  - platform: homeassistant
    entity_id: weather.openweathermap
    attribute: temperature
    id: weather_temperature
    internal: true

  - platform: homeassistant
    entity_id: weather.openweathermap
    attribute: pressure
    id: weahter_pressure
    internal: true

  - platform: homeassistant
    entity_id: climate.netatmo_bedroom_2
    attribute: temperature
    id: set_temp_bedroom2
    internal: true

  - platform: homeassistant
    entity_id: climate.netatmo_thermostat
    attribute: temperature
    id: set_temp_bedroom
    internal: true

  - platform: homeassistant
    entity_id: climate.netatmo_livingroom
    attribute: temperature
    id: set_temp_livingroom
    internal: true

  - platform: homeassistant
    entity_id: climate.climate_control_air_conditioner
    attribute: temperature
    id: set_temp_ac
    internal: true

  - platform: homeassistant
    entity_id: sensor.balcony_sensors_temperature
    id: balcony_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.netatmo_livingroom_current_temperature
    id: livingroom_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.motion_sensor_temperature
    id: hallway_1_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.climate_control_temperature
    id: hallway_2_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.netatmo_thermostat_current_temperature
    id: bedroom_temperature
    internal: true

  - platform: homeassistant
    entity_id: sensor.netatmo_bedroom_2_current_temperature
    id: bedroom_2_temperature
    internal: true

switch:
  - platform: template
    id: motion_enabled
    name: "$name Motion backlight"
    icon: mdi:motion
    optimistic: true
    restore_state: true

script:
  - id: lcd_backlight_touch
    mode: restart
    then:
      - script.stop: lcd_backlight_sensor
      - light.control:
          id: backlight
          brightness: !lambda "return id(day_brightness).state / 100;"
      - delay: !lambda "return id(backlight_timeout).state * 1000;"
      - light.control:
          id: backlight
          brightness: !lambda "return id(dimmed_brightness).state / 100;"

  - id: lcd_backlight_sensor
    mode: restart
    then:
      - if:
          condition:
            - switch.is_on: motion_enabled
          then:
            - if:
                condition:
                  - sun.is_above_horizon:
                then:
                  - light.control:
                      id: backlight
                      brightness: !lambda "return id(day_brightness).state / 100;"
                else:
                  - light.control:
                      id: backlight
                      brightness: !lambda "return id(night_brightness).state / 100;"
            - delay: !lambda "return id(backlight_timeout).state * 1000;"
            - light.control:
                id: backlight
                brightness: !lambda "return id(dimmed_brightness).state /100;"

  - id: connecting_script
    mode: single
    then:
      - while:
          condition:
            - binary_sensor.is_off: status_sensor
          then:
            - display.page.show: connecting
            - component.update: lcd
            - delay: 500 ms
            - display.page.show: connecting_blank
            - component.update: lcd
            - delay: 500 ms